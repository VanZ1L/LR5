#include <iostream>
#include <stdlib.h>
using namespace std;
//СТРУКТУРА БУДЕТ ЭЛЕМЕНТОМ СПИСКА
struct Node //или просто Звено списка
{
    int x; //инфо данные структуры
    Node* Next; //Указатель не следующее звено
};


//КЛАСС СПИСОК
class List
{
    Node* Head, * Tail; //Указатели на начало списка и на конец
public:
    List() :Head(NULL), Tail(NULL) {}; //Инициализация указателей как пустых
    ~List(); //Деструктор для освобождения памяти от всего что будет
    void Add(int x); //Функция заполнения структуры Node и добавления её в список как элемента
    void Show(); //Функция отображения списка List 
};


List::~List() //ДЕСТРУКТОР ДЛЯ ОЧИСТКИ ПАМЯТИ
{
    Node* temp = Head; //Временный указатель на начало списка
    while (temp != NULL) //Пока в списке что-то есть

    {
        temp = Head->Next; //Резерв адреса на следующий элемент списка
        delete Head;  //Освобождение памяти от первой структуры как элемента списка

        Head = temp;  //Сдвиг начала на следующий адрес, который берем из резерва

    }
}

//ФУНКЦИЯ ЗАПОЛНЕНИЯ ИНФОРМАЦИОННЫХ ПОЛЕЙ СТРУКТУРЫ NODE И ДОБАВЛЕНИЯ ЭТОЙ СТРУКТУРЫ В СПИСОК
void List::Add(int x)
{
    Node* temp = new Node; //Выделение памяти для нового звена списка
    temp->x = x; //Временное запоминание принятого параметра x
    temp->Next = NULL; //Указание, что следующее звено новосозданной структуры пока пустое

    if (Head != NULL) //Если список не пуст 
    {
        Tail->Next = temp; //Указание, что следующее звено списка это новосозданная структура
        Tail = temp;
    }
    else Head = Tail = temp; //Если список не пуст, добавление первого элемента
}

//ФУНКЦИЯ ОТОБРАЖЕНИЯ СПИСКА НА ЭКРАНЕ
void List::Show()
{
    Node* temp = Head; //Временный указатель на начало списка
    while (temp != NULL) //Пока в списке что-то встречается
    {
        cout << temp->x << " "; //Выводим значения из списка на экран
        temp = temp->Next; //Сдвигаем указатель на начало на адрес следующего элемента
    }
    cout << endl;
}

void main()
{
    List lst;
    system("CLS");
    lst.Add(1);
    lst.Show();
    system("pause");
}